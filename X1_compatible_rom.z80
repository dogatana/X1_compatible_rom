;
; X1 compatible IPL
;
; programed by NAKAUE,T
;
; 2020-07-31 ver0.1.0 first version
;                     武田君のエミュレータでS-OS SWORDを起動できた
;                     バイナリサイズ 950byte，未実装機能があるのに大きい
;
; かつて X1エミュの部屋(http://www.turboz.to/)に掲載されていた
; ぷにゅ氏作の IPL ver1.01(x1ipl101.zip,IPLROM.z80)を参考にしている
;
; その他の参考文献
; X1 turbo  BIOSの解析,稲葉 康治,Oh!MZ 1985年1月号,p.97～109
; IOCS DATA LIST,泉 大介ら,Oh!MZ 1986年11月号,p.76～
; 試験に出るX1,祝 一平，日本ソフトバンク,1987
; HuBASIC Format詳細,BouKiCHi,https://boukichi.github.io/HuDisk/HuBASIC_Format.html
;   2020-07-31 閲覧

; FDD0-3からの起動のみ実装する
; CMT，Timer関係を実装しない
; ROMとEMMの実装を保留

; 以下のエントリを固定番地とする
; 0066h : NMIリセット
; 00f5h : IPLエラー処理?
; 01cfh : IPL overlay?
; 021ah : IPL用ディスクREAD
; 038ah : IPL用KEY入力
; 03cbh : IPL用メッセージ表示
; 03d9h : IPL用1文字表示ルーチン
;
; 以下のバッファを固定番地とする
; 0ff80h : カーソルxy
; 0ff86h : テキスト色
; 0ff87h : ドライブ番号

; ワークエリアアドレス

WRKTOP  equ     0ff80h                  ; ワークエリアの先頭アドレス
;WRKTOP  equ     0df80h                  ; ワークエリアの先頭アドレス(テスト時)
TXTCUR  equ     WRKTOP + 0h
TXTATR  equ     WRKTOP + 6h
IPLDRV  equ     WRKTOP + 7h
WRKSIZ  equ     10h                     ; ワークエリアの長さ

FILEBUF equ     0de00h                  ; ファイル読込みバッファ


; 以下はturbo BIOSで使用
COLORF  equ     0f8d0h
CLSCHR  equ     0f8d1h

; IOアドレス
IOFDCCR equ     0ff8h                   ; FDC コマンドレジスタ
IOFDCTR equ     0ff9h                   ; FDC トラックレジスタ
IOFDCSR equ     0ffah                   ; FDC セクタレジスタ
IOFDCDR equ     0ffbh                   ; FDC データレジスタ
IOFDCNO equ     0ffch                   ; ドライブNo./サイド/モーターON
IOCRTC  equ     1800h                   ; CRTC レジスタ
IO80C49 equ     1900h                   ; サブCPU
IO8255B equ     1a01h                   ; 8255 port B
IO8255C equ     1a02h                   ; 8255 port C
IOIPLOF equ     1e00h                   ; IPL ROM OFF
IOATTR  equ     2000h                   ; アトリビュートVRAM
IOTEXT  equ     3000h                   ; テキストVRAM
TXTSIZ  equ     800h                    ; テキストVRAMのサイズ

; IOATTRとIOTEXTで異なるビット位置
; log2((IOATTR ^ IOTEXT) >> 8)
BIT_ATTR_TEXT   equ     4

;        org     0d000h                 ; (テスト時)
        org     00000h

; IPL起動
IPLBOT:
        ld      sp, 0
;        db      0, 0, 0                 ; NOP NOP NOP
        call    INIT_WORK
        ld      hl, PARM40              ; CRTCをWIDTH40で初期化
        call    INIT_CRT
IPL_LOOP:
        ld      hl, 2007h               ; 20=SPC,07=白
        call    CLR_VRAM

        ld      a, 2                    ; 赤
        ld      (TXTATR), a
        ld      de, MSG_WELCOME
        call    IPLPRN_XY
        ld      a, 7                    ; 白
        ld      (TXTATR), a

        ld      de, MSG_WAITING
        call    IPLPRN_XY
        ld      a, (IPLDRV)
        add     a, 30h
        call    IPLPTC

        call    IS_FDD_READY            ; FDD 0の挿入チェック
        jr      nc, IPL_LOAD

        ld      hl, 2007h               ; 20=SPC,07=白
        call    CLR_VRAM
        call    PRT_MENU
        call    INP_MENU                ; 入力待ち
        jr      IPL_LOOP

IPL_LOAD:
        ld      hl, 2007h               ; 20=SPC,07=白
        call    CLR_VRAM

        ld      de, MSG_LOOKING
        call    IPLPRN_XY
        ld      a, (IPLDRV)
        add     a, 30h
        call    IPLPTC

        call    LOAD1ST                 ; 先頭セクタの読込み
        jr      nz, ERR_LOAD            ; デバイスがおかしい？
        call    CHECK1ST                ; 起動フラグの確認
        jr      nz, ERR_MISSING         ; フラグ等がおかしい

        ld      hl, 2007h               ; 20=SPC,07=白
        call    CLR_VRAM
        ld      hl, FILEBUF+11h         ; ファイル名の次，パスワード領域
        ld      (hl), 0                 ; 終端0にする。どうせパスワードをサポートしないので
        ld      de, MSG_LOADING
        call    IPLPRN_XY
        ld      de, FILEBUF+1
        call    IPLPRN

        ld      hl, (FILEBUF+12h)       ; プログラムサイズ(byte)
        dec     hl
        inc     h
        ld      a, h                    ; セクタ数(256で割っている)
;        ld      a, 2                    ; テストなので
        ld      hl, (FILEBUF+14h)       ; ロードアドレス
;        ld      hl, FILEBUF+200h        ; テストなので
        ld      de, (FILEBUF+1eh)       ; 開始セクタ
        call    LOADFILE
        jr      nz, ERR_LOAD            ; デバイスがおかしい？

        ld      hl, (FILEBUF+16h)       ; 実行アドレス
        ld      bc, IOIPLOF
        out     (c), a                  ; aの値に依存しない
        jp      (hl)                    ; IPL終了

ERR_LOAD:
        ld      bc, 3000h+40*2
        add     a, 20h
        out     (c), a
        ld      de, MSG_ERROR
        call    IPLPRN_XY
;        jr      IPL_END                 ; テスト時のみ
        jp      IPL_LOOP

ERR_MISSING:
        ld      de, MSG_MISSING
        call    IPLPRN_XY
;        jr      IPL_END                 ; テスト時のみ
        jp      IPL_LOOP

IPL_END:

;        ei
;        ret


; ワークエリアの初期化
; レジスタ破壊 af d hl
INIT_WORK:
        ld      hl, WRKTOP
        ld      d, WRKSIZ
        xor     a
INIT_WORK_1:
        ld      (hl), a
        inc     hl
        dec     d
        jr      nz, INIT_WORK_1

        ld      a, 7                    ; 白
        ld      (TXTATR), a
        ret


; メニュー表示
; レジスタ破壊 af de
PRT_MENU:
        ld      de, MSG_MENU1
        call    IPLPRN_XY
        ld      de, MSG_MENU2
        call    IPLPRN_XY
        ld      de, MSG_MENU3
        call    IPLPRN_XY
        ld      de, MSG_MENU4
        call    IPLPRN_XY
        ret


; メニュー選択
; 戻り値
;   (0ff87h) IPLDRV ドライブ指定(0～3)
; レジスタ破壊 af hl
INP_MENU:
        call    IPLKEY
        sub     30h
        jp      m, INP_MENU
        cp      3
        jp      m, INP_MENU_1
        jr      INP_MENU

INP_MENU_1:
        ld      hl, IPLDRV
        ld      (hl), a
        ret


; IPL用KEY入力
; 戻り値
;   a : KEYコード
; レジスタ破壊 af
;        org     038ah
IPLKEY:
        push    bc

        ei                              ; サブCPUとの通信時に必要？
        call    WAIT_80C49_WR
        ld      bc, IO80C49
        ld      a, 0e6h                 ; e6=キー入力
        out     (c), a
        call    WAIT_80C49_WR
        di
        call    WAIT_80C49_RD
        ld      bc, IO80C49
        in      a, (c)                  ; ファンクションキー(読み捨て)
        call    WAIT_80C49_RD
        ld      bc, IO80C49
        in      a, (c)                  ; ASCII

        pop     bc
        ret

; 80C49(サブCPU)の書込み可能待ち
; レジスタ破壊 af bc
WAIT_80C49_WR:
        ld      bc, IO8255B
WAIT_80C49_WR_1:
        in      a, (c)
        and     40h
        jr      nz, WAIT_80C49_WR_1
        ret


; 80C49(サブCPU)の読出し可能待ち
; レジスタ破壊 af bc
WAIT_80C49_RD:
        ld      bc, IO8255B
WAIT_80C49_RD_1:
        in      a, (c)
        and     20h
        jr      nz, WAIT_80C49_RD_1
        ret


; CRTCを初期化
; パラメータ
;   hl : 初期化パラメータの先頭アドレス
; レジスタ破壊 af bc d hl
INIT_CRT:
        ld      bc, IOCRTC
        ld      d, 9                    ; CRTCレジスタ番号
INIT_CRT_1:
        out     (c), d
        inc     c
        inc     b
        outi                            ; outiの仕様に注意
        dec     c
        dec     d
        jp      p, INIT_CRT_1

        xor     a
        ld      d, 12
        out     (c), d
        inc     c
        out     (c), a
        dec     c
        inc     d
        out     (c), d
        inc     c
        out     (c), a

        ret


; テキストVRAMクリア
; turbo BIOSなら1377h
; パラメータ
;   (0f8d0h) COLORF 埋めるアトリビュート
;   (0f8d1h) CLSCHR 埋めるキャラクタコード
; レジスタ破壊 af bc d hl
STCLST:
        ld      h, (CLSCHR)
        ld      l, (COLORF)
        call    CLR_VRAM
        ret


; テキストVRAMクリア(レジスタ指定)
; パラメータ
;   h : 埋めるキャラクタコード(通常 20h)
;   l : 埋めるアトリビュート(通常 7h)
; レジスタ破壊 af bc d hl
CLR_VRAM:
        ld      bc, IOTEXT
        call    CLR_VRAM_1
        ld      h, l
        ld      bc, IOATTR

CLR_VRAM_1:
        ld      de, TXTSIZ
CLR_VRAM_2:
        out     (c), h
        inc     bc
        dec     de
        ld      a, d
        or      e
        jr      nz, CLR_VRAM_2
        ret


; IPL用1文字表示
; パラメータ
;   a : 文字コード
;   (0ff80h) TXTCUR カーソルxy
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 なし
;        org     03d9h
IPLPTC:
        push    bc
        push    af
        push    af
        call    LD_TEXT_ADDR
        pop     af
        call    IPL_PUTCHAR
        call    ST_CUR_ADDR
        pop     af
        pop     bc
        ret


; IPL用メッセージ表示(座標指定)
; パラメータ
;   de : 表示位置とメッセージのアドレス(00終端)
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 af de
IPLPRN_XY:
        push    bc
        ld      a, (de)
        inc     de
        ld      c, a
        ld      a, (de)
        inc     de
        ld      b, HIGH(IOTEXT)
        add     a, b
        ld      b, a
        jr      IPLPRN_1


; IPL用メッセージ表示
; パラメータ
;   de : メッセージのアドレス(00終端)
;   (0ff80h) TXTCUR カーソルxy
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 af de
;        org     03cbh
IPLPRN:
        push    bc
        call    LD_TEXT_ADDR
IPLPRN_1
        ld      a, (de)
        or      a
        jr      z, IPLPRN_2
        call    IPL_PUTCHAR
        inc     de
        jr      IPLPRN_1
IPLPRN_2
        call    ST_CUR_ADDR
        pop     bc
        ret


; IPL用1文字表示(レジスタ破壊)
; パラメータ
;   a : 文字コード
;   bc : VRAMアドレス
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   bc : VRAMアドレス
; レジスタ破壊 af bc
IPL_PUTCHAR:
        out     (c), a
        res     BIT_ATTR_TEXT, b        ; アトリビュートアドレスに変換
                                        ; 例えば 30aah → 20aah
        ld      a, (TXTATR)
        out     (c), a
        set     BIT_ATTR_TEXT, b        ; テキストアドレスに変換
        inc     bc
        ret


; 表示アドレス計算
; パラメータ
;   (0ff80h) TXTCUR カーソルxy
; 戻り値
;   bc : VRAMアドレス
; レジスタ破壊 af bc
LD_TEXT_ADDR:
        ld      bc, (TXTCUR)
LD_TEXT_ADDR_1:
        ld      a, HIGH(IOTEXT)
        add     a, b
        ld      b, a
        ret


; カーソルアドレス計算
; パラメータ
;   bc : VRAMアドレス
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 af bc
ST_CUR_ADDR:
        ld      a, -(HIGH(IOTEXT))
        add     a, b
        ld      b, a
        ld      (TXTCUR), bc
        ret


; FDDの準備確認
; パラメータ
;   (0ff87h) IPLDRV ドライブ指定(0～3)
; 戻り値
;   キャリ : 準備未完で1
; レジスタ破壊 af bc de
IS_FDD_READY:
        ld      a, (IPLDRV)
        or      80h
        ld      bc, IOFDCNO
        out     (c), a
        ld      c, LOW(IOFDCCR)

        ld      de, 0
IS_FDD_READY_1:
        in      a, (c)
        jp      p, IS_FDD_READY_2
        dec     de
        ld      a, d
        or      e
        jr      nz, IS_FDD_READY_1
        scf
        ret
IS_FDD_READY_2:
        and     a
        ret


; FDCのBusy待ち
; レジスタ破壊 af bc
WAIT_FDC_BUSY:
        ld      bc, IOFDCCR
        in      a, (c)
        and     81h
        jr      nz, WAIT_FDC_BUSY
        ret


; FDCリストア
; レジスタ破壊 af bc
FDC_RESTORE:
        ld      a, 2
        ld      bc, IOFDCCR
        out     (c), a
        call    WAIT_FDC_BUSY
        ret


; FDCシーク
; パラメータ
;   a : トラック番号
; レジスタ破壊 af bc
;   ゼロ : エラーでnz
FDC_SEEK:
        ld      bc, IOFDCDR
        out     (c), a
        ld      a, 1eh
        ld      bc, IOFDCCR
        out     (c), a
        call    WAIT_FDC_BUSY
        in      a, (c)
        and     99h
        ret


; 1セクタ読込み
; トラック移動は完了しているものとする
; パラメータ
;   a : セクタ番号(0オリジン)
;   hl : 読込みバッファのアドレス
; レジスタ破壊 af bc de hl
FDC_READ:
        ld      bc, IOFDCSR             ; セクタ番号のセット
        inc     a
        out     (c), a
        call    WAIT_FDC_BUSY

        ld      d, LOW(IOFDCCR)         ; FDCステータスレジスタ
        ld      e, LOW(IOFDCDR)         ; FDCデータレジスタ
        ld      bc, IOFDCCR

        ld      a, 80h
        out     (c), a                  ; 読出し指示
        call    WAIT1
FDC_READ_1:
        in      a,(c)                   ; ステータス確認
        rrca                            ; BUSY?
        jr      nc,FDC_READ_2
        rrca                            ; DATA REQUEST?
        jr      nc,FDC_READ_1

        ld      c, e                    ; FDCデータレジスタ
        in      a, (c)
        ld      (hl), a
        inc     hl
        ld      c, d                    ; FDCステータスレジスタ
        jr      FDC_READ_1

FDC_READ_2:
        rlca    ; BACK STAT (RRCA <-> RLCA)
        ret


WAIT1:  ld      a, 7
WAIT2:  dec     a
        jr      nz, WAIT2
        ret



; 先頭セクタの読込み
; 戻り値
;   ゼロ : エラーでnz
LOAD1ST:
        call    FDC_RESTORE
        ld      hl, FILEBUF
        ld      a, 0
        call    FDC_READ
        ret


; ファイルの読込み
; パラメータ
;   a : セクタ数
;   de : レコード番号(トラック+サイド+セクタ)
;   hl : 読込みバッファのアドレス
; レジスタ破壊 af bc de hl af'
LOADFILE:
        ex      af, af'                 ; aレジスタ退避

        ld      a, e

        ; d←トラック番号+サイド
        ; d = HIGH(de << 4)
        rlca
        rl      d
        rlca
        rl      d
        rlca
        rl      d
        rlca
        rl      d

        ; e←セクタ番号(0オリジン)
        ld      a, e
        and     0fh
        ld      e, a

LOADFILE_1:
        ; ドライブ番号とサイドを指定してモータON
        ld      a, 1
        and     d                       ; f←サイド
        ld      a, (IPLDRV)
        jr      z, LOADFILE_2           ; サイド0だった
        or      10h                     ; サイド1だった
LOADFILE_2
        or      80h                     ; モータON
        ld      bc, IOFDCNO
        out     (c), a

        ; トラックシーク
        ld      a, d
        srl     a
        call    FDC_SEEK                ; シーク
        ret     nz                      ; エラー

LOADFILE_3
        ; 1セクタ読込み
        push    de
        ld      a,e
        call    FDC_READ
        pop     de
        ret     nz                      ; エラー

        ; セクタ数確認
        ex      af, af'
        dec     a
        jr      z, LOADFILE_4           ; 読込み完了
        ex      af, af'

        ; セクタ番号++1
        ld      a, e
        inc     a
        and     0fh
        ld      e, a
        jr      nz, LOADFILE_3          ; 次も同じトラック

        ; トラック番号++1
        ld      a, d
        inc     a
        ld      d, a
        jr      LOADFILE_1

LOADFILE_4:
        ld      a, (IPLDRV)             ; モータOFF
        ld      bc, IOFDCNO
        out     (c), a

        ret


; 先頭セクタのチェック
; 戻り値
;   ゼロ : エラーでnz
CHECK1ST:
        ld      hl, FILEBUF
        ld      a, (hl)
        cp      1
        ret     nz
        ld      l, 0eh
        ld      a, (hl)
        cp      'S'
        ret     nz
        inc     hl
        ld      a, (hl)
        cp      'y'
        ret     nz
        inc     hl
        ld      a, (hl)
        cp      's'
        ret


; WIDTH40とWIDTH80のCRTC初期化パラメータ
; レジスタR9から逆順にR0まで
PARM40: db      7, 0, 28, 25, 2, 31, 52, 45, 40, 55
PARM80: db      7, 0, 28, 25, 2, 31, 56, 89, 80, 111


; 表示メッセージ
; VRAMオフセット(2バイト), "メッセージ本体", 終端0
MSG_WELCOME:
        dw      40*23+8
        db      "X1 compatible IPL version 0.1.0", 0
MSG_WAITING:
        dw      0
        db      "IPL is waiting for the device ready; FD",0
MSG_LOOKING:
        dw      0
        db      "IPL is looking for a program from FD",0
MSG_LOADING:
        dw      0
        db      "IPL is loading ",0
MSG_ERROR:
        dw      40
        db      "Device error.",0
MSG_MISSING:
        dw      40
        db      "Program not found.",0
MSG_MENU1:
        dw      9
        db      "Make Your device ready", 0
MSG_MENU2:
        dw      40*2+2
        db      "Press selected key to start driving:", 0
MSG_MENU3:
        dw      40*4+11
        db      "0-3:Floopy", 0
MSG_MENU4:
        dw      40*5+13
        db      "R:ROM", 0
MSG_MENU5:
        dw      40*6+13
        db      "E:EMM", 0
MSG_MENU6:
        dw      40*7+13
        db      "M:Monitor", 0


