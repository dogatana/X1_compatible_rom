;
; X1 compatible IPL
;
; programed by NAKAUE,T
;
; These codes are licensed under CC0.
; http://creativecommons.org/publicdomain/zero/1.0/deed.ja
;
; 2020-07-31 ver0.1.0 first version
;                     武田君のエミュレータでS-OS SWORDを起動できた
;                     バイナリサイズ 950byte，未実装機能があるのに大きい
; 2020-08-01 ver0.2.0 リファクタリング
;                     ディスク関係以外のアドレスをオリジナルと合わせた
;                     連続空きメモリ134バイト
; 2020-08-03 ver0.3.0 ディスク関係並べ替え
;                     IPL ROMからRAMへの切り替えをRAM上で行うようにした
;                     起動時にWIDTH40にする処理で，8255への出力を追加
;                     連続空きメモリ118バイト
; 2020-08-04 ver0.3.1 ディスク関係リファクタリングとデバッグ
;                     ファイルバッファの位置を直し忘れていた
;                     ファイルバッファが60K CP/Mに潰されるので対策
; 2020-08-05 ver0.3.2 パレット初期化を追加
; 2020-09-13 ver0.4.0 BASIC ROMボードCZ-8RBに対応(実機未所有のため，仕様解説のみで確認)
;                     EMM0からの起動に対応(CZ-8RBと微妙に仕様が違って面倒)
;                     1081バイト。ついに1KB突破……
;                     そもそもオリジナルのROMサイズを1KBだと勘違いしていた
;                     (正しくは4KB)
; 2020-09-15 コメントのみ修正
; 2021-03-03 ver0.4.1 ディスクREAD(021ah)にキャリーフラグのクリアを追加
;                     X-DOS起動不具合対策
; 2022-02-11 ver0.5.0 CMTブート追加のためのリファクタリング
;                     メニューの大文字/小文字を無視するようにした
; 2022-02-11 ver0.6.0 CMTブート対応
; 2022-02-11 ver0.6.1 CMTブート時のリーダ部(1の連続)の読み飛ばし方法を変更
;                     ファイル名拡張子(.Sys)のチェックをやめた
;                     RuinousXIII起動不具合対策
;
; かつて X1エミュの部屋(http://www.turboz.to/)に掲載されていた
; ぷにゅ氏作の IPL ver1.01(x1ipl101.zip,IPLROM.z80)を参考にしている
;
; その他の参考文献
; X1 turbo  BIOSの解析, 稲葉 康治, Oh!MZ 1985年1月号, p.97～109
; IOCS DATA LIST, 泉 大介ら, Oh!MZ 1986年11月号, p.76～
; 試験に出るX1, 祝 一平, 日本ソフトバンク, 1987
; HuBASIC Format詳細, BouKiCHi, https://boukichi.github.io/HuDisk/HuBASIC_Format.html
;   2020-07-31 閲覧
;
; 開発にあたり武田氏のX1エミュレータ eX1 (http://takeda-toshiya.my.coocan.jp/)を
; 全面的に使用した。eX1の強力なデバッグ機能のお陰でこのプラグラムを作りえた。


; FDD0-3およびROM，EMM，RAMからの起動を実装した
; CMT，Timer関係を実装しない
; モニタの実装が未着手

; 以下のエントリを固定番地とする
; 0066h : NMIリセット(ok)
; 00f5h : IPLエラー処理?(未実装)
; (01cfh : IPL overlay? x1ipl101で固定アドレスとしているが，不要？)
; 021ah : IPL用ディスクREAD
; 038ah : IPL用KEY入力(ok)
; 03cbh : IPL用メッセージ表示(ok)
; 03d9h : IPL用1文字表示ルーチン(ok)
;
; 以下のバッファを固定番地とする
; 0ff80h : カーソルxy
; 0ff86h : テキスト色
; 0ff87h : ドライブ番号

; ワークエリアアドレス

WRKTOP  equ     0ff80h                  ; ワークエリアの先頭アドレス
TXTCUR  equ     WRKTOP + 0h             ; カーソルxy
;               WRKTOP + 2h             ; 初期化後の0を維持すること
;               WRKTOP + 3h             ; 初期化後の0を維持すること
;               WRKTOP + 4h             ; 初期化後の0を維持すること
TXTATR  equ     WRKTOP + 6h             ; テキスト色
IPLDRV  equ     WRKTOP + 7h             ; ドライブ番号
                                        ;(ただしROM起動の場合22h，EMM起動の場合15h)
WRKSIZ  equ     20h                     ; ワークエリアの長さ

REDIREC equ     WRKTOP + 10h            ; IPL ROMからRAMに切り替えるリダイレクタ
EXECADR equ     REDIREC + 3             ; 実行アドレス

FILEBUF equ     0fe00h                  ; ファイル読込みバッファ


; 以下はturbo BIOSで使用
COLORF  equ     0f8d0h
CLSCHR  equ     0f8d1h

; IOアドレス
IOEMM_L equ     0d00h                   ; EMM アドレス上位
IOEMM_M equ     0d01h                   ; EMM アドレス中位
IOEMM_H equ     0d02h                   ; EMM アドレス下位
IOEMM   equ     0d03h                   ; EMM データ読み書き
IOROM_H equ     0e00h                   ; BASIC ROMボード アドレス上位
IOROM_M equ     0e01h                   ; BASIC ROMボード アドレス中位
IOROM_L equ     0e02h                   ; BASIC ROMボード アドレス下位
IOROM   equ     0e03h                   ; BASIC ROMボード データ読出し
IOFDCCR equ     0ff8h                   ; FDC コマンドレジスタ
IOFDCTR equ     0ff9h                   ; FDC トラックレジスタ
IOFDCSR equ     0ffah                   ; FDC セクタレジスタ
IOFDCDR equ     0ffbh                   ; FDC データレジスタ
IOFDCNO equ     0ffch                   ; ドライブNo./サイド/モーターON
IOPALET equ     1200h                   ; パレット
IOCRTC  equ     1800h                   ; CRTC レジスタ
IO80C49 equ     1900h                   ; サブCPU
IO8255B equ     1a01h                   ; 8255 port B (CMT読出し)
IO8255C equ     1a02h                   ; 8255 port C
IOIPLOF equ     1e00h                   ; IPL ROM OFF
IOATTR  equ     2000h                   ; アトリビュートVRAM
IOTEXT  equ     3000h                   ; テキストVRAM
TXTSIZ  equ     800h                    ; テキストVRAMのサイズ

; IOATTRとIOTEXTで異なるビット位置
; log2((IOATTR ^ IOTEXT) >> 8)
BIT_ATTR_TEXT   equ     4

; テキストクリアの標準色
TEXT_STD        equ     2007h           ; 20=SPC,07=白


        org     00000h

; ----------------------------------------------------------
; メインルーチンとメニュー
; ----------------------------------------------------------

; IPL起動
IPLBOT:

        ; ワークエリアの初期化 (インライン展開済み)
        ; 12バイト
INIT_WORK:
        ld      sp, WRKTOP + WRKSIZ     ; 初期化用の仮設定
        ld      hl, 0
        ld      b, WRKSIZ / 2
INIT_WORK_1:
        push    hl
        djnz    INIT_WORK_1
        ; 0以外としたいワーク(たとえばTXTATR)が初期化されていないので注意
INIT_WORK_END:

        ld      sp, 0                   ; ずれたので再設定
        ld      hl, PARM40              ; CRTCをWIDTH40で初期化

        ; CRTCを初期化 (インライン展開済み)
        ; パラメータ
        ;   hl : 初期化パラメータの先頭アドレス
        ; レジスタ破壊 af bc hl
        ; 16バイト
INIT_CRT:
        ld      a, 13                   ; CRTCレジスタ番号
INIT_CRT_1:
        ld      bc, IOCRTC
        out     (c), a
        inc     c
        inc     b
        outi                            ; outiの仕様に注意
        dec     a
        jp      p, INIT_CRT_1

        ld      bc, IO8255C
        ld      a, 40h
        out     (c), a
INIT_CRT_END:

        call    CLR_PALET

        ; メインループ
IPL_LOOP:
        call    CLR_VRAM_ALL

        ld      a, 2                    ; 赤
        ld      (TXTATR), a
        ld      de, MSG_WELCOME
        call    IPLPRN_XY
        ld      a, 7                    ; 白
        ld      (TXTATR), a

        ld      de, MSG_WAITING
        call    IPLPRN_XY
        call    PRT_DRV

        call    IS_FDD_READY            ; FDD 0の挿入チェック
        jr      nc, IPL_LOAD

IPL_LOOP2:
        call    IPL_MENU                ; メニュー表示と入力待ち

        jr      IPL_LOOP
IPL_LOOP_END:

; ここに1バイトあき

        ; NMIリセットがアドレス066hとなるよう，調整する
        org     051h

        ; 読込みエラー等 (インライン展開済み)
        ; 12バイト
ERR_LOAD:
        ld      bc, 3000h+40*2          ; エラーステータス
        add     a, 20h
        out     (c), a
        ld      de, MSG_ERROR
        jr      ERR_MISSING_1
ERR_LOAD_END:

        ; 読み込むべきファイルが見つからないエラー (インライン展開済み)
        ; 9バイト
ERR_MISSING:
        ld      de, MSG_MISSING
ERR_MISSING_1:
        call    IPLPRN_XY
        call    WAIT_MOMENT
        ; ループの戻りをNMIリセットと共用

        ; NMIリセットのエントリ(メニューに戻す)
RST_066H:
        jr      IPL_LOOP2


; パレットの初期化
; TXTCUR+2から3バイトが0である前提
; レジスタ破壊 f b hl
; 12バイト
CLR_PALET:
        ld      hl, TXTCUR + 2
        ld      b, HIGH(IOPALET + 100h)
        outi
        outi
        outi
        ret


; ドライブ番号の表示
; パラメータ
;   (0ff80h) TXTCUR カーソルxy
;   (0ff86h) TXTATR アトリビュート
;   (0ff87h) IPLDRV ドライブ指定(0～3)
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 a
; 8バイト
PRT_DRV:
        ld      a, (IPLDRV)
        add     a, 30h
        jp      IPLPTC                  ; 飛び先でリターン


; 数秒待つ
; レジスタ破壊 af bc de
; 13バイト
WAIT_MOMENT:
        ld      b, 10
        ld      de, 0
WAIT_MOMENT_1:
        dec     de
        ld      a, d
        or      e
        jr      nz, WAIT_MOMENT_1
        djnz    WAIT_MOMENT_1
        ret


; ファイルの読込みと実行
; 69バイト
IPL_LOAD:
;        call    CLR_VRAM_TOP           ; 長いメッセージで上書きされるので省略

        ld      de, MSG_LOOKING
        call    IPLPRN_XY
        call    PRT_DRV

        call    LOAD1ST                 ; 先頭セクタの読込み
        jr      nz, ERR_LOAD            ; デバイスがおかしい？
        call    CHECK1ST                ; 起動フラグの確認
        jr      nz, ERR_MISSING         ; フラグ等がおかしい


        ; リダイレクタをRAMに書き込む
        ld      de, (FILEBUF+16h)       ; 実行アドレス
        call    WRITE_REDIRECTOR

        ; ファイル名の表示
        call    CLR_VRAM_TOP
        ld      de, MSG_LOADING
        call    IPLPRN_XY
        ld      de, FILEBUF+1
        call    IPLPRN

        ; ファイル本体の読込み
        ld      hl, (FILEBUF+12h)       ; プログラムサイズ(byte)
        dec     hl
        inc     h
        ld      c, h                    ; セクタ数(256で割っている)
        ld      hl, (FILEBUF+14h)       ; ロードアドレス
        ld      de, (FILEBUF+1eh)       ; 開始セクタ
        call    LOADFILE_COM
        jp      nz, ERR_LOAD            ; デバイスがおかしい？

IPL_LOAD_1:
        ld      bc, IOIPLOF
        jp      REDIREC                 ; IPL終了
IPL_LOAD_END:


; メニュー表示と選択
; 戻り値
;   (0ff87h) IPLDRV ドライブ指定(0～3)
; レジスタ破壊 af af' bc de hl
; 65バイト=表示20バイト+入力45バイト
IPL_MENU:
        call    CLR_VRAM_TOP
        ld      hl, MSG_ADDR_MENU
        ld      a, (hl)                 ; メッセージの行数
        inc     hl
IPL_MENU_1:
        ld      e, (hl)
        inc     hl
        ld      d, (hl)
        inc     hl
        ex      af, af'
        call    IPLPRN_XY
        ex      af, af'
        dec     a
        jr      nz, IPL_MENU_1

INP_MENU:
        call    IPLKEY

        cp      '#'                     ; RAMから起動(謎機能)
        jp      z, EXEC_RAM

        or      20h                     ; 全て小文字に統一

        sub     30h
        jp      m, INP_MENU
        cp      3                       ; FDD(0-3)
        jp      m, INP_MENU_1

        cp      'c' - 30h               ; CMTから起動
        jp      z, IPL_CMT

        cp      'e' - 30h               ; EMMから起動
        jr      z, INP_MENU_1

        cp      'm' - 30h               ; モニタ
        jp      z, EXEC_MON

        cp      'r' - 30h               ; BASIC ROM(CZ-8RB)
        jr      z, INP_MENU_1

        jr      INP_MENU

INP_MENU_1:
        ld      hl, IPLDRV
        ld      (hl), a
        ret
INP_MENU_END:


; リダイレクタをRAMに書き込む
; ファイルを読み込む前に実行アドレスを書いておかないと
; CP/Mにバッファを潰される
; パラメータ
;   de : 実行アドレス
; レジスタ破壊 f hl
; 16バイト
WRITE_REDIRECTOR:
        ld      hl, REDIREC
        ld      (hl), 0edh              ; out (c), a
        inc     hl
        ld      (hl), 79h
        inc     hl
        ld      (hl), 0c3h              ; jp xxxx
        ld      (EXECADR), de
        ret


; 先頭セクタのチェック
; パスワード領域を0にし，ファイル名の文字列を0終端にする
; 戻り値
;   ゼロ : エラーでnz
; レジスタ破壊 af hl
; 10バイト
CHECK1ST:
        ld      hl, FILEBUF + 11h       ; パスワード領域
        ld      (hl), 0                 ; パスワード領域をつぶし，文字列の終端0にする
                                        ; どうせパスワードをサポートしないので問題なし
        ld      l, LOW(FILEBUF)         ; 起動フラグ
        ld      a, (hl)
        dec     a
;        ret     nz
;        ld      l, 0eh
;        ld      a, (hl)
;        cp      'S'
;        ret     nz
;        inc     hl
;        ld      a, (hl)
;        cp      'y'
;        ret     nz
;        inc     hl
;        ld      a, (hl)
;        cp      's'
;        ret     nz
;        inc     hl                      ; ファイル名の次，パスワード領域
;                                        ; フラグ変化しないのがありがたい
        ret
CHECK1ST_END:


; ----------------------------------------------------------
; FDD関連ルーチン その1
; ----------------------------------------------------------

; FDDの準備確認
; パラメータ
;   (0ff87h) IPLDRV ドライブ指定(0～3)
;            ただし11h以上の場合，FDD以外が指定されたとみなして
;            無条件で準備完了(ノンキャリ)を返す
; 戻り値
;   キャリ : 準備未完で1
; レジスタ破壊 af bc de
; 31バイト
IS_FDD_READY:
        call    IS_BOOT_FDD
        jr      nc, IS_FDD_READY_2
        or      80h
        ld      bc, IOFDCNO
        out     (c), a
        ld      c, LOW(IOFDCCR)

        ld      de, 0
IS_FDD_READY_1:
        in      a, (c)
        jp      p, IS_FDD_READY_2
        dec     de
        ld      a, d
        or      e
        jr      nz, IS_FDD_READY_1
        scf
        ret
IS_FDD_READY_2:
        and     a
        ret


; FDCリストア
; レジスタ破壊 af bc
; 2バイト
FDC_RESTORE:
        ld      a, 2
        ; 次のルーチン(FDC_CMD)へ続く


; FDCのコマンドレジスタに命令を与え，完了を待つ
; パラメータ
;   a : コマンド番号
; レジスタ破壊 af bc
; 5バイト
FDC_CMD:
        ld      bc, IOFDCCR
        out     (c), a
        ; 次のルーチン(WAIT_FDC_BUSY)へ続く


; FDCのBusy待ち
; bcレジスタがIOFDCCRでなければならない
; bレジスタが0fh(FDCのIOアドレスの上位)でなければならない
; レジスタ破壊 af bc
; 7バイト
WAIT_FDC_BUSY:
WAIT_FDC_BUSY_1:
        in      a, (c)
        and     81h
        jr      nz, WAIT_FDC_BUSY_1
        ret


; FDCシーク
; パラメータ
;   a : トラック番号
; レジスタ破壊 af bc
;   ゼロ : エラーでnz
; 15バイト
FDC_SEEK:
        ld      bc, IOFDCDR
        out     (c), a
        ld      a, 1eh
        call    FDC_CMD
        in      a, (c)
        and     99h
        ret


; 先頭セクタの読込み
; パラメータ
;   (0ff87h) IPLDRV 11h以上の場合，MEM_LOAD1STに飛ぶ
; 戻り値
;   ゼロ : エラーでnz
; レジスタ破壊 af bc de hl
; 12バイト
LOAD1ST:
        call    IS_BOOT_FDD
        jr      nc, EMM_LOAD1ST
        call    FDC_RESTORE
        ld      hl, FILEBUF
        xor     a
        ; 次のルーチン(FDC_READ)へ続く


; 1セクタ読込み
; トラック移動は完了しているものとする
; パラメータ
;   a : セクタ番号(0オリジン)
;   hl : 読込みバッファのアドレス
; レジスタ破壊 af bc de hl
; 43バイト
FDC_READ:
        ld      bc, IOFDCSR             ; セクタ番号のセット
        inc     a
        out     (c), a
        ld      c, LOW(IOFDCCR)
        call    WAIT_FDC_BUSY

        ld      d, LOW(IOFDCCR)         ; FDCステータスレジスタ
        ld      e, LOW(IOFDCDR)         ; FDCデータレジスタ
        ld      bc, IOFDCCR

        ld      a, 80h
        out     (c), a                  ; 読出し指示
        call    WAIT1
FDC_READ_1:
        in      a,(c)                   ; ステータス確認
        rrca                            ; BUSY?
        jr      nc,FDC_READ_2
        rrca                            ; DATA REQUEST?
        jr      nc,FDC_READ_1

        ld      c, e                    ; FDCデータレジスタ
        in      a, (c)
        ld      (hl), a
        inc     hl
        ld      c, d                    ; FDCステータスレジスタ
        jr      FDC_READ_1

FDC_READ_2:
        rlca    ; BACK STAT (RRCA <-> RLCA)
        ret
FDC_READ_END:


; ----------------------------------------------------------
; EMM・BASIC ROM関連ルーチン(1)
; ----------------------------------------------------------

; ファイルの読込み(FDD・EMM・ROM共通)
; IPLDRVの内容に応じて飛び先を変える
; パラメータ
;   (0ff87h) IPLDRV 11h以上の場合，FDD以外
;   c : セクタ数
;   de : レコード番号(トラック+サイド+セクタ)
;   hl : 読込みバッファのアドレス
; レジスタ破壊 af bc de hl af'
; 9バイト
LOADFILE_COM:
        call    IS_BOOT_FDD
        jp      nc, EMM_LOADFILE
        ld      a, c
        jr      LOADFILE
LOADFILE_COM_END:


; EMMまたはROMから先頭セクタを読みだす
; パラメータ
;   a : IPLDRVの内容(42hの場合BASIC ROM)
; 22バイト
EMM_LOAD1ST:
        ld      hl, FILEBUF
        ld      bc, IOEMM_L

        cp      'r' - 30h               ; ROMモード？
        jr      nz, EMM_LOAD1ST_1
        ld      b, HIGH(IOROM_H)

EMM_LOAD1ST_1:
        xor     a

        out     (c), a                  ; 読出しアドレスのセット
        inc     c                       ; ROMは上位・中位・下位，EMMは下位・中位・上位
        out     (c), a
        inc     c
        out     (c), a
        inc     c
        ; 次のルーチン(EMM_READ)へ続く
EMM_LOAD1ST_END:


; EMM・ROM 1セクタ(256byte)読込み
; ボードへのアドレス設定が終わっているものとする
; パラメータ
;   bc : 読出しポート
;   b : モード(0eh = ROM(オートインクリメント無し)，その他 = オートインクリメント)
;   hl : 読込みバッファのアドレス
; 戻り値
;   hl : 読込みバッファの最終アドレス+1
;   ゼロ : 常に0
; レジスタ破壊 af d hl ix
; 31バイト
EMM_READ:
        ld      ix, EMM_READ_4          ; EMMの場合の分岐アドレス

        ld      a, b                    ; ROMの場合は別処理
        cp      HIGH(IOROM)
        jr      nz, EMM_READ_1

        ld      ix, EMM_READ_3          ; ROMの場合の分岐アドレス

EMM_READ_1:
        xor     a
        ld      d, a                    ; d : カウンタ

EMM_READ_2:
        in      a, (c)
        ld      (hl), a
        inc     hl

        jp      (ix)                    ; EMMとROMで分岐

EMM_READ_3:                             ; ROMの場合のみ
        dec     c                       ; 読出しポートの前が下位アドレス
        ld      a, d
        inc     a
        out     (c), a
        inc     c

EMM_READ_4:
        inc     d
        jr      nz, EMM_READ_2

        ret
EMM_READ_END:

; ここに21バイトのあき

; ----------------------------------------------------------
; FDD関連ルーチン その2
; ----------------------------------------------------------

; アドレスはLOADFILEのエントリアドレスから逆算
        org     01ech

; ちょっと待つ
; 呼び出し元のcall命令含め 146clock = 36.5usec
; レジスタ破壊 af
; 6バイト
; call 17clock
WAIT1:  ld      a, 7                    ; 7clock
WAIT2:  dec     a                       ; 4clock
        jr      nz, WAIT2               ; 12clock
        ret                             ; 10clock


; ファイルの読込み(本体)
; エントリアドレスを固定する関係で，後半がここに飛んでいる
; 40バイト
LOADFILE_MAIN:
        ; トラックシーク
        ld      a, d
        srl     a
        call    FDC_SEEK                ; シーク
        ret     nz                      ; エラー

LOADFILE_3:
        ; 1セクタ読込み
        push    de
        ld      a,e
        call    FDC_READ
        pop     de
        ret     nz                      ; エラー

        ; セクタ数確認
        ex      af, af'
        dec     a
        jr      z, LOADFILE_4           ; 読込み完了
        ex      af, af'

        ; セクタ番号++
        ld      a, e
        inc     a
        and     0fh
        ld      e, a
        jr      nz, LOADFILE_3          ; 次も同じトラック

        ; トラック番号++
        ld      a, d
        inc     a
        ld      d, a
        jr      LOADFILE_1

LOADFILE_4:
        ld      a, (IPLDRV)             ; モータOFF
        ld      bc, IOFDCNO
        out     (c), a

        ret
LOADFILE_MAIN_END:


; ファイルの読込み(アドレス固定)
; パラメータ
;   a : セクタ数
;   de : レコード番号(トラック+サイド+セクタ)
;   hl : 読込みバッファのアドレス
; レジスタ破壊 af bc de hl af'
; 37バイト
        org     021ah
LOADFILE:
        or      a                       ; キャリークリア
        ex      af, af'                 ; aレジスタ退避

        ld      a, e

        ; d←トラック番号+サイド
        ; d = HIGH(de << 4)
        rlca
        rl      d
        rlca
        rl      d
        rlca
        rl      d
        rlca
        rl      d

        ; e←セクタ番号(0オリジン)
        ld      a, e
        and     0fh
        ld      e, a

LOADFILE_1:
        ; ドライブ番号とサイドを指定してモータON
        ld      a, 1
        and     d                       ; f←サイド
        ld      a, (IPLDRV)
        jr      z, LOADFILE_2           ; サイド0だった
        or      10h                     ; サイド1だった
LOADFILE_2:
        or      80h                     ; モータON
        ld      bc, IOFDCNO
        out     (c), a

        jr      LOADFILE_MAIN

LOADFILE_END:

; ここに283バイトあき(MENUデータを追い出したので)

; ----------------------------------------------------------
; FDD・EMM共通ルーチン
; ----------------------------------------------------------
; 先頭アドレスをIPLKEYのアドレスから逆算
        org     035bh

; 起動ドライブがFDDか？
; パラメータ
;   (0ff87h) IPLDRV 11h以上の場合，FDD以外
; 戻り値
;   キャリ : FDDなら1
;   a : IPLDRVの内容
; レジスタ破壊 af
; 6バイト
IS_BOOT_FDD:
        ld      a, (IPLDRV)
        cp      11h
        ret
IS_BOOT_FDD_END:

; ----------------------------------------------------------
; テキスト関係ルーチン
; ----------------------------------------------------------

; テキストVRAMクリア(全画面) (アドレス変えてもよい)
; レジスタ破壊 af bc hl
; 4バイト
CLR_VRAM_ALL:
        ld      a, HIGH(TXTSIZ)
        jr      CLR_VRAM_TOP_1          ; 飛び先でリターン


; テキストVRAMクリア(上部12行+αだけ) (アドレス変えてもよい)
; レジスタ破壊 af bc hl
; 5バイト
CLR_VRAM_TOP:
        ld      a, 2
CLR_VRAM_TOP_1:
        ld      hl, TEXT_STD
        ;jr      CLR_VRAM               ; 次のルーチンなので省略
        ; 次のルーチン(CLR_VRAM)へ続く


; テキストVRAMクリア(レジスタ指定) (アドレス変えてもよい)
; パラメータ
;   a : 埋めるバイト数 / 256
;   h : 埋めるキャラクタコード(通常 20h)
;   l : 埋めるアトリビュート(通常 7h)
; レジスタ破壊 af bc hl
; 22バイト
CLR_VRAM:
        ld      bc, IOTEXT
CLR_VRAM_1:                             ; テキストを256バイト分クリア
        out     (c), h
        inc     c
        jr      nz, CLR_VRAM_1
        res     BIT_ATTR_TEXT, b        ; アトリビュートアドレスに変換
                                        ; 例えば 30aah → 20aah
CLR_VRAM_2:                             ; アトリビュートを256バイト分クリア
        out     (c), l
        inc     c
        jr      nz, CLR_VRAM_2
        set     BIT_ATTR_TEXT, b        ; テキストアドレスに変換
        inc     b
        dec     a
        jr      nz, CLR_VRAM_1          ; 256*aバイト分のループ
        ret


; 80C49(サブCPU)の書込み可能待ち (アドレス変えてもよい)
; レジスタ破壊 af bc
; 10バイト
WAIT_80C49_WR:
        ld      bc, IO8255B
WAIT_80C49_WR_1:
        in      a, (c)
        and     40h
        jr      nz, WAIT_80C49_WR_1
        ret
WAIT_80C49_WR_END:


; IPL用KEY入力 (アドレス固定)
; 戻り値
;   a : KEYコード
; レジスタ破壊 af
; 24バイト
        org     038ah
IPLKEY:
        push    bc

        ei                              ; サブCPUとの通信時に必要？
        call    WAIT_80C49_WR
        ld      bc, IO80C49
        ld      a, 0e6h                 ; e6=キー入力
        out     (c), a
        call    WAIT_80C49_WR
        di

        call    READ_80C49              ; a←ファンクションキー(読み捨て)
        call    READ_80C49              ; a←ASCII

        pop     bc
        ret


; 80C49(サブCPU)の読出し
; 読出し可能を待ってから1バイト読む
; レジスタ破壊 af bc
; 15バイト
READ_80C49:
        ld      bc, IO8255B
READ_80C49_1:
        in      a, (c)
        and     20h
        jr      nz, READ_80C49_1

        ld      bc, IO80C49
        in      a, (c)
        ret
READ_80C49_END:


; アドレス 03b1h
; ここに1バイトあき
        nop


; IPL用メッセージ表示(座標指定)
; パラメータ
;   de : 表示位置とメッセージのアドレス(00終端)
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 af de
; 12バイト
IPLPRN_XY:
        push    bc                      ; 最後にpop bcされてしまうので
        ex      de, hl
        ld      c, (hl)
        inc     hl
        ld      b, (hl)
        inc     hl
        ex      de, hl

        call    LD_TEXT_ADDR_1
        jr      IPLPRN_1                ; 飛び先でret


; IPL用1文字表示(レジスタ破壊)
; パラメータ
;   a : 文字コード
;   bc : VRAMアドレス
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   bc : VRAMアドレス
; レジスタ破壊 af bc
; 13バイト
IPL_PUTCHAR:
        out     (c), a
        res     BIT_ATTR_TEXT, b        ; アトリビュートアドレスに変換
                                        ; 例えば 30aah → 20aah
        ld      a, (TXTATR)
        out     (c), a
        set     BIT_ATTR_TEXT, b        ; テキストアドレスに変換
        inc     bc
        ret
IPL_PUTCHAR_END:


; IPL用メッセージ表示 (アドレス固定)
; パラメータ
;   de : メッセージのアドレス(00終端)
;   (0ff80h) TXTCUR カーソルxy
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 de
        org     03cbh
IPLPRN:
        push    bc
        call    LD_TEXT_ADDR
IPLPRN_1
        ld      a, (de)
        or      a
        jr      z, IPLPTC_EXIT          ; メモリ足りないので後処理を共用している
        call    IPL_PUTCHAR
        inc     de
        jr      IPLPRN_1
IPLPRN_END:                             ; アドレス 03d9h


; IPL用1文字表示 (アドレス固定)
; パラメータ
;   a : 文字コード
;   (0ff80h) TXTCUR カーソルxy
;   (0ff86h) TXTATR アトリビュート
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 なし
; 15バイト
        org     03d9h
IPLPTC:
        push    af
        call    IPLPTC_1
        pop     af
        ret
IPLPTC_1:
        push    bc
        push    af
        call    LD_TEXT_ADDR
        pop     af
        call    IPL_PUTCHAR

; IPL用1文字表示の後処理
; IPLPTCとIPLPRNで共用している
; 5バイト
IPLPTC_EXIT:
        call    ST_CUR_ADDR
        pop     bc
        ret
IPLPTC_END:                             ; アドレス 03edh (残り19バイト)


; 表示アドレス計算
; パラメータ
;   (0ff80h) TXTCUR カーソルxy
; 戻り値
;   bc : VRAMアドレス
; レジスタ破壊 af bc
; 9バイト
LD_TEXT_ADDR:
        ld      bc, (TXTCUR)
LD_TEXT_ADDR_1:
        ld      a, HIGH(IOTEXT)
        add     a, b
        ld      b, a
        ret
LD_TEXT_ADDR_END:


; カーソルアドレス計算
; パラメータ
;   bc : VRAMアドレス
; 戻り値
;   (0ff80h) TXTCUR カーソルxy
; レジスタ破壊 af bc
; 9バイト
ST_CUR_ADDR:
        ld      a, -(HIGH(IOTEXT))
        add     a, b
        ld      b, a
        ld      (TXTCUR), bc
        ret
ST_CUR_ADDR_END:


; ここに1バイトあき

; ----------------------------------------------------------
; ここまでで1KB
; ----------------------------------------------------------

        org     0400h

; ----------------------------------------------------------
; 追加機能ルーチン(1)
; ----------------------------------------------------------

; RAM 0番地のプログラムを実行する
; turboのIPLの隠し機能……らしい
; 9バイト
EXEC_RAM:
        ; リダイレクタをRAMに書き込む
        ld      de, 0
        call    WRITE_REDIRECTOR
        jp      IPL_LOAD_1              ; IPL終了
EXEC_RAM_EMD:                           ; アドレス 01e9h

; ----------------------------------------------------------
; EMM・BASIC ROM関連ルーチン(2)
; ----------------------------------------------------------

; EMMファイルの読込み
; パラメータ
;   a : IPLDRVの内容(42hの場合BASIC ROM)
;   c : セクタ数
;   de : レコード番号(アドレス / 256)
;   hl : 読込みバッファのアドレス
; レジスタ破壊 af bc de hl af' ix
; 28バイト
EMM_LOADFILE:
        cp      'r' - 30h               ; ROMモード？
        jr      z, ROM_LOADFILE

        push    bc                      ; セクタ数を退避

        ld      bc, IOEMM_L

        xor     a                       ; アドレス 下位
        out     (c), a
        inc     c

        ld      a, e                    ; アドレス 中位
        out     (c), a
        inc     c

        ld      a, d                    ; アドレス 上位
        out     (c), a
        inc     c                       ; bcは読出しアドレス

        pop     de                      ; セクタ数

EMM_LOADFILE_1:
        call    EMM_READ
        dec     e
        jr      nz, EMM_LOADFILE_1

        ret
EMM_LOADFILE_END:


; ROMファイルの読込み
; パラメータ
;   c : セクタ数
;   de : レコード番号(アドレス / 256)
;   hl : 読込みバッファのアドレス
; レジスタ破壊 af bc de hl af' ix
; 29バイト
ROM_LOADFILE:
        ld      a, c                    ; 裏aにセクタ数を退避
        ex      af, af'

ROM_LOADFILE_1:
        ld      bc, IOROM_H

        ld      a, d                    ; アドレス 上位
        out     (c), a
        inc     c

        ld      a, e                    ; アドレス 中位
        out     (c), a
        inc     c

        xor     a                       ; アドレス 下位
        out     (c), a
        inc     c                       ; bcは読出しアドレス

        push    de
        call    EMM_READ
        pop     de

        ex      af, af'
        dec     a
        ret     z
        ex      af, af'

        inc     de
        jr      ROM_LOADFILE_1
ROM_LOADFILE_END:


; ----------------------------------------------------------
; CMT関連ルーチン
; ----------------------------------------------------------

; CMTからのファイルの読込みと実行
IPL_CMT:
        call    CLR_VRAM_TOP           ; 長いメッセージで上書きされるので省略

        ; 状態取得
        call    MT_STAT
        or      a
        jp      z, ERR_LOAD             ; テープ未セット

        ld      de, MSG_WAITING
        call    IPLPRN_XY
        ld      de, MSG_LOOKING
        call    IPLPRN_XY
        ld      de, MSG_LOOKCMT
        call    IPLPRN_XY

; IPL中なので割り込み禁止のはず
;        di                              ; ここから割り込み禁止区間
        ld      a, 2                    ; 2=再生コマンド
        call    MT_CTRL                 ; 再生開始

        ld      hl, FILEBUF
        ld      bc, IO8255B

        call    CMT_LOAD1ST
        push    af

        ld      a, 1                    ; 1=停止コマンド
        call    MT_CTRL                 ; 停止
;        ei                              ; ここまで割り込み禁止区間
; IPL中なのでずっと割り込み禁止にしてある

        pop     af
        jp      c, ERR_MISSING          ; ヘッダ部の読込み異常

        call    CHECK1ST                ; 起動フラグの確認
        jp      nz, ERR_MISSING         ; フラグ等がおかしい

        ; ファイル名の表示
        call    CLR_VRAM_TOP
        ld      de, MSG_LOADING
        call    IPLPRN_XY
        ld      de, FILEBUF+1
        call    IPLPRN

        ; リダイレクタをRAMに書き込む
        ld      de, (FILEBUF+16h)       ; 実行アドレス
        call    WRITE_REDIRECTOR

        ; ファイル本体の読込み
        ld      bc, IO8255B
        ld      de, (FILEBUF+12h)       ; プログラムサイズ(byte)
        ld      hl, (FILEBUF+14h)       ; ロードアドレス
        ld      a, 2                    ; 2=再生コマンド
        call    MT_CTRL                 ; 再生開始
        call    CMT_LOADFILE
        push    af

        ld      a, 1                    ; 1=停止コマンド
        call    MT_CTRL                 ; 停止

        pop     af
        jp      c, ERR_LOAD             ; 読込み異常

IPL_CMT_1:
        ; IPL終了
        ld      bc, IOIPLOF
        jp      REDIREC                 ; IPL終了
IPL_CMT_END


; CMTインフォメーションブロックの読込み
; パラメータ
;   bc : IO8255B (1a01h)
;   hl : 読込みバッファのアドレス
; 戻り値
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af de hl
;
; 割り込み禁止状態で呼び出すこと
CMT_LOAD1ST:
        ; リーダー部の1(不定個数と想定)を読み飛ばす
        call    MT_SKIP1111
        jr      c, CMT_LOAD1ST_EXIT     ; 異常終了

        ; リーダー部の0を40個，読み飛ばす
        ld      d, 40 - 1               ; 1を読み飛ばす時点で既に1個 読んでいる
        call    MT_SKIP0
        jr      c, CMT_LOAD1ST_EXIT     ; 異常終了

        ; リーダー部の1を41個，読み飛ばす
        ld      d, 41
        call    MT_SKIP1
        jr      c, CMT_LOAD1ST_EXIT     ; 異常終了

        ; インフォメーションブロック32byte + チェックサム2byte
        ld      e, 34
CMT_LOAD1ST_1:
        call    MT_RDBYTE
        ld      (hl), d
        inc     hl
        jr      c, CMT_LOAD1ST_EXIT     ; 異常終了
        dec     e
        jr      nz, CMT_LOAD1ST_1

CMT_LOAD1ST_EXIT:
        ret
CMT_LOAD1ST_END:


; CMTデータ本体の読込み
; パラメータ
;   bc : IO8255B (1a01h)
;   de : データ長
;   hl : 読込みバッファのアドレス
; 戻り値
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af de hl
;
; 割り込み禁止状態で呼び出すこと
CMT_LOADFILE:
        push    de

        ; リーダー部の1(不定個数と想定)を読み飛ばす
        call    MT_SKIP1111
        jr      c, CMT_LOADFILE_EXIT    ; 異常終了

        ; リーダー部の0を20個，読み飛ばす
        ld      d, 20 - 1               ; 1を読み飛ばす時点で既に1個 読んでいる
        call    MT_SKIP0
        jr      c, CMT_LOADFILE_EXIT    ; 異常終了

        ; リーダー部の1を21個，読み飛ばす
        ld      d, 21
        call    MT_SKIP1
        jr      c, CMT_LOADFILE_EXIT    ; 異常終了

        ; データ本体
CMT_LOADFILE_1:
        call    MT_RDBYTE
        ld      (hl), d
        inc     hl
        jr      c, CMT_LOADFILE_EXIT    ; 異常終了
        pop     de
        dec     de
        push    de
        ld      a, d
        or      e
        jr      nz, CMT_LOADFILE_1

CMT_LOADFILE_EXIT:
        pop     de

        ret
CMT_LOADFILE_END:


; カセットコントロール
; パラメータ
;   a : コマンド
;       0 = EJECT
;       1 = STOP
;       2 = READ
;       3 = FF
;       4 = REW
;       5 = APSS+1
;       6 = APSS-1
;       a = WRITE
; レジスタ破壊 f
; リターン時に割り込み禁止になっている
MT_CTRL:
        push    bc
        push    af

        ei                              ; サブCPUとの通信時に必要？
        call    WAIT_80C49_WR
        ld      bc, IO80C49
        ld      a, 0e9h                 ; e9=カセットデッキコントロール
        out     (c), a
        call    WAIT_80C49_WR
        di

        call    WAIT_80C49_WR
        ld      bc, IO80C49
        pop     af
        out     (c), a

        pop     bc
        ret
MT_CTRL_END:


; カセットデッキ状態取得
; 戻り値
;   a : 下位4bit
;       0 = EJECT
;       1 = STOP
;       2 = READ
;       3 = FF
;       4 = REW
;       a = WRITE
;   a : 上位4bit
;       10 = テープ回転中(1)/停止中(0)
;       20 = テープセット済み(1)/未セット(0)
;       40 = 録音防止(1)/書込み可(0)
; レジスタ破壊 af
; リターン時に割り込み禁止になっている
MT_STAT:
        push    bc
        push    hl

        ei                              ; サブCPUとの通信時に必要？
        call    WAIT_80C49_WR
        ld      bc, IO80C49
        ld      a, 0ebh                 ; eb=カセットセンサー読出し
        out     (c), a
        call    WAIT_80C49_WR
        di

        call    READ_80C49              ; a←カセットセンサー
        and     07h
        rlca
        rlca
        rlca
        rlca
        ld      h, a

        ei                              ; サブCPUとの通信時に必要？
        call    WAIT_80C49_WR
        ld      bc, IO80C49
        ld      a, 0eah                 ; ea=カセットデッキ状態読出し
        out     (c), a
        call    WAIT_80C49_WR
        di

        call    READ_80C49              ; a←デッキ状態
        and     0fh
        or      h

        pop     hl
        pop     bc
        ret
MT_STAT_END:


; CMTの信号立ち上がりを待つ
; パラメータ
;   bc : IO8255B (1a01h)
; 戻り値
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af
MT_EDGE:
        ; lowを待つ
        in      a, (c)
        rrca                            ; 4clock
        jr      nc, MT_EDGE_2           ; 12clock
        rrca                            ; 4clock
        jr      c, MT_EDGE              ; 12clock

MT_EDGE_1:
        ; 立ち上がりを待つ
        in      a, (c)
        rrca                            ; 4clock
        jr      nc, MT_EDGE_2           ; 12clock
        rrca                            ; 4clock
        jr      nc, MT_EDGE_1           ; 12clock
        ; キャリが残っている

MT_EDGE_2:
        ccf
        ret
MT_EDGE_END:


; CMTから1bit読み込む
; パラメータ
;   bc : IO8255B (1a01h)
; 戻り値
;   a : 読込みデータが0なら0
;   ゼロ : 読込みデータが0なら0
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af
MT_RDBIT:
        call    MT_EDGE
        jr      c, MT_RDBIT_EXIT        ; 異常終了

        ; 約185usec待つ
;        ld      a, 40                   ; 1ループ約4.5usec
        ld      a, 35                   ; 1ループ約4.5usec
                                        ; (ROMなので1ウェイト，RAMなら約4usec)
MT_RDBIT_1:
        dec     a                       ; 4clock
        jr      nz, MT_RDBIT_1          ; 12clock

        ; 判定
        in      a, (c)
        and     02h
MT_RDBIT_EXIT:
        ret
MT_RDBIT_END:


; CMTから1bit読み込み，Dレジスタに入れる
; パラメータ
;   bc : IO8255B (1a01h)
; 戻り値
;   d : 最下位ビットに読込みデータ，上位7ビットは左シフト
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af d
MT_RDBIT_D:
        rlc     d
        call    MT_RDBIT
        jr      c, MT_RDBIT_D_EXIT      ; 異常終了
        jr      z, MT_RDBIT_D_EXIT
        inc     d
MT_RDBIT_D_EXIT:
        ret
MT_RDBIT_D_END:


; CMTの255個以上の1の連続を探して読み飛ばす
; パラメータ
;   bc : IO8255B (1a01h)
; 戻り値
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af
;
; 最後に0を1つ読むので注意
MT_SKIP1111:
        push    de

        ; 255個の連続を探す
MT_SKIP1111_1:
        ld      d, 0ffh
MT_SKIP1111_2:
        call    MT_RDBIT
        jr      c, MT_SKIP1111_EXIT     ; 異常終了
        jr      z, MT_SKIP1111_1        ; 0が来たのでカウントリセット
        dec     d
        jr      nz, MT_SKIP1111_2

        ; 残りを読み飛ばす
MT_SKIP1111_3:
        call    MT_RDBIT
        jr      c, MT_SKIP1111_EXIT     ; 異常終了
        jr      nz, MT_SKIP1111_3

MT_SKIP1111_EXIT:
        pop     de
        ret
MT_SKIP1111_END:


; CMTの0を指定個数読み飛ばす
; パラメータ
;   bc : IO8255B (1a01h)
;   d : 個数
; 戻り値
;   d : 残り個数
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af d
MT_SKIP0:
        call    MT_RDBIT
        jr      c, MT_SKIP0_EXIT        ; 異常終了
        scf
        jr      nz, MT_SKIP0_EXIT       ; 異常終了(1が来た)
        dec     d
        jr      nz, MT_SKIP0

        or      a                       ; 正常終了
MT_SKIP0_EXIT:
        ret
MT_SKIP0_END:


; CMTの1を指定個数読み飛ばす
; パラメータ
;   bc : IO8255B (1a01h)
;   d : 個数
; 戻り値
;   d : 残り個数
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af d
MT_SKIP1:
        call    MT_RDBIT
        jr      c, MT_SKIP1_EXIT        ; 異常終了
        scf
        jr      z, MT_SKIP1_EXIT        ; 異常終了(0が来た)
        dec     d
        jr      nz, MT_SKIP1

        or      a                       ; 正常終了
MT_SKIP1_EXIT:
        ret
MT_SKIP1_END:


; CMTから1バイト読み込む
; パラメータ
;   bc : IO8255B (1a01h)
; 戻り値
;   d : 読込んだデータ
;   キャリ : BREAKや異常終了なら1
; レジスタ破壊 af d
;
; スタートビット1bit，データ本体8bit
MT_RDBYTE:
        call    MT_RDBIT                ; スタートビット
        jr      c, MT_RDBYTE_EXIT       ; 異常終了
        scf
        jr      z, MT_RDBYTE_EXIT       ; 異常終了(スタートビットが無い)

        ld      d, 0
        call    MT_RDBIT_D              ; 第7ビット
        call    MT_RDBIT_D              ; 第6ビット
        call    MT_RDBIT_D              ; 第5ビット
        call    MT_RDBIT_D              ; 第4ビット
        call    MT_RDBIT_D              ; 第3ビット
        call    MT_RDBIT_D              ; 第2ビット
        call    MT_RDBIT_D              ; 第1ビット
        call    MT_RDBIT_D              ; 第0ビット
        ; 異常終了時はキャリが立っている
MT_RDBYTE_EXIT:
        ret
MT_RDBYTE_END:


; ----------------------------------------------------------
; マシン語モニタ
; ----------------------------------------------------------

EXEC_MON:
        jp      INP_MENU
EXEC_MON_END:


; #PRINTS
; 空白を1文字表示する
; [destruct] F
MON_PRINTS:
        push    af
        ld      a, ' '
        call    IPLPTC
        pop     af
        ret
MON_PRINTS_END:


; #PRTHX
; Aレジスタの内容を2桁の16進数として表示する
; [in]  A : binary
; [destruct] AF
MON_PRTHX:
        push    af
        rrca
        rrca
        rrca
        rrca
        call    MON_PRTHX_1
        pop     af
MON_PRTHX_1:
        call    MON_ASC
        jp      IPLPTC
        ; omit RET
MON_PRTHX_AND:


; #PRTHL
; print HL registor as 4 digit HEX
; [in]  HL : binary
; [destruct] AF
MON_PRTHL:
        ld      a, h
        call    MON_PRTHX
        ld      a, l
        jr      MON_PRTHX
        ; omit RET
MON_PRTHL_END:


; #ASC
; binary to ASCII convert
; [in]  A : binary (low nibble)
; [out] A : ASCII code ('0' - '9', 'A' - 'F')
; [destruct] AF
MON_ASC:
        and     0fh

        cp      10
        ccf
        adc     a, 30h
        daa

        ret
MON_ASC_END:
; ------------------


; ----------------------------------------------------------
; データ領域
; 計384バイト
; ----------------------------------------------------------
        org     0680h
DATA_TOP:

; 表示メッセージ
; VRAMオフセット(2バイト), "メッセージ本体", 終端0
MSG_WELCOME:
        dw      40*23+8
        db      "X1 compatible IPL 0.6.1", 0
MSG_ERROR:
        dw      40
        db      "Device error", 0
MSG_WAITING:
        dw      0
        db      "IPL is waiting for the device FD", 0
MSG_LOOKING:
        dw      7                                           ; "IPL is "の部分を省略
        db      "looking for a program from FD", 0
MSG_LOOKCMT:
        dw      34                                          ; "IPL is ～ from "までをFD用から拝借
        db      "CMT", 0
MSG_LOADING:
        dw      0
        db      "IPL is loading ", 0
MSG_MISSING:
        dw      40
        db      "Program not found", 0
MSG_MENU1:
        dw      9
        db      "Make Your device ready", 0
MSG_MENU2:
        dw      40*2+2
        db      "Press selected key to start driving:", 0
MSG_MENU3:
        dw      40*4+11
        db      "0-3:FDD", 0
MSG_MENU4:
        dw      40*5+13
        db      "C:CMT", 0
MSG_MENU5:
        dw      40*6+13
        db      "R:ROM", 0
MSG_MENU6:
        dw      40*7+13
        db      "E:EMM", 0
MSG_MENU7:
        dw      40*8+13
        db      "M:Mon", 0
MSG_MENU8:
        dw      40*9+13
        db      "#:RAM", 0
MSG_END:

; メニューの表示内容
; 17バイト
MSG_ADDR_MENU:
        db      8                       ; メニューの行数
        dw      MSG_MENU1
        dw      MSG_MENU2
        dw      MSG_MENU3
        dw      MSG_MENU4
        dw      MSG_MENU5
        dw      MSG_MENU6
        dw      MSG_MENU7
        dw      MSG_MENU8

; WIDTH40とWIDTH80のCRTC初期化パラメータ
; レジスタR13から逆順にR0まで
; 28バイト
PARM40: db      0, 0, 0, 0, 7, 0, 28, 25, 2, 31, 52, 45, 40, 55
PARM80: db      0, 0, 0, 0, 7, 0, 28, 25, 2, 31, 56, 89, 80, 111

DATA_END:
